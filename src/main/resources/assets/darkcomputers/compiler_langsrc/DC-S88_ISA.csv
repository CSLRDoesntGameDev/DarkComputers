Opcode (Hex),Group,Mnemonic,Operands,,Code Implementation
0x0001,Data,MOV,"SRC, DST, IGN",,R[DST] = R[SRC]
0x0002,Data,LDI,"DST, IMM, IGN",,R[DST] = SXT(IMM)
0x0003,Data,LDR,"DST, SRC, IMM",,R[DST] = SXT(M[R[SRC] + SXT(IMM)] & 0xFF)
0x0004,Data,STR,"SRC, DST, IMM",,M[R[DST] + SXT(IMM)] = (R[SRC] & 0xFF)
0x0005,Math,ADD,"SRC, DST, IGN",,R[DST] = R[DST] + R[SRC]
0x0006,Math,SUB,"SRC, DST, IGN",,R[DST] = R[DST] - R[SRC]
0x0007,Math,MUL,"SRC, DST, IGN",,R[DST] = R[DST] * R[SRC]
0x0008,Math,DIV,"SRC, DST, IGN",,R[DST] = R[DST] / R[SRC]
0x0009,Math,MOD,"SRC, DST, IGN",,R[DST] = R[DST] % R[SRC]
0x000A,Math,NEG,"SRC, DST, IGN",,R[DST] = -R[SRC]
0x000B,Logic,AND,"SRC, DST, IGN",,R[DST] = R[DST] & R[SRC]
0x000C,Logic,OR,"SRC, DST, IGN",,R[DST] = R[DST] | R[SRC]
0x000D,Logic,XOR,"SRC, DST, IGN",,R[DST] = R[DST] ^ R[SRC]
0x000E,Logic,SHL,"SRC, DST, IGN",,R[DST] = R[DST] <<  R[SRC]
0x000F,Logic,SHR,"SRC, DST, IGN",,R[DST] = R[DST] >> R[SRC]
0x0010,Control,JMP,"DST, IGN, IGN",,PC = R[DST]
0x0011,Control,JSR,"DST, IGN, IGN",,PUSH(PC); PC = R[DST]
0x0012,Control,JIP,"DST, SRC, IGN",,if (R[SRC] > 0) JSR(DST)
0x0013,Control,RET,"IGN, IGN, IGN",,PC = POP()
0x0014,Control,HLT,"IGN, IGN, IGN",,Halts the CPU
0x0015,Condition,EQ,"DST, SRCa, SRCb",,R[DST] = (R[SRCa] == R[SRCb]) ? 1 : 0
0x0016,Condition,NEQ,"DST, SRCa, SRCb",,R[DST] = (R[SRCa] != R[SRCb]) ? 1 : 0
0x0017,Condition,LT,"DST, SRCa, SRCb",,R[DST] = (R[SRCa] < R[SRCb]) ? 1 : 0
0x0018,Condition,GT,"DST, SRCa, SRCb",,R[DST] = (R[SRCa] > R[SRCb]) ? 1 : 0
0x0019,Condition,LE,"DST, SRCa, SRCb",,R[DST] = (R[SRCa] <= R[SRCb]) ? 1 : 0
0x001A,Condition,GE,"DST, SRCa, SRCb",,R[DST] = (R[SRCa] >= R[SRCb]) ? 1 : 0
0x001B,Stack,PSH,"SRC, IGN, IGN",,SP += 1; S[SP] = R[SRC]
0x001C,Stack,POP,"DST, IGN, IGN",,SP -= 1; R[DST] = S[SP]